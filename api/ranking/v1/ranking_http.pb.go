// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v5.27.1
// source: api/ranking/v1/ranking.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRankingCreateRanking = "/api.ranking.v1.Ranking/CreateRanking"
const OperationRankingDeleteRanking = "/api.ranking.v1.Ranking/DeleteRanking"
const OperationRankingGetRanking = "/api.ranking.v1.Ranking/GetRanking"
const OperationRankingListRanking = "/api.ranking.v1.Ranking/ListRanking"
const OperationRankingUpdateRanking = "/api.ranking.v1.Ranking/UpdateRanking"

type RankingHTTPServer interface {
	// CreateRanking 创建排名 (HTTP POST)
	CreateRanking(context.Context, *CreateRankingRequest) (*CreateRankingReply, error)
	// DeleteRanking 删除排名 (HTTP DELETE)
	DeleteRanking(context.Context, *DeleteRankingRequest) (*DeleteRankingReply, error)
	// GetRanking 获取单个排名 (HTTP GET)
	GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error)
	// ListRanking 列出所有排名 (HTTP GET)
	ListRanking(context.Context, *ListRankingRequest) (*ListRankingReply, error)
	// UpdateRanking 更新排名 (HTTP POST)
	UpdateRanking(context.Context, *UpdateRankingRequest) (*UpdateRankingReply, error)
}

func RegisterRankingHTTPServer(s *http.Server, srv RankingHTTPServer) {
	r := s.Route("/")
	r.POST("/create", _Ranking_CreateRanking0_HTTP_Handler(srv))
	r.POST("/update/{id}", _Ranking_UpdateRanking0_HTTP_Handler(srv))
	r.DELETE("/delete/{id}", _Ranking_DeleteRanking0_HTTP_Handler(srv))
	r.GET("/get/{id}", _Ranking_GetRanking0_HTTP_Handler(srv))
	r.GET("/list", _Ranking_ListRanking0_HTTP_Handler(srv))
}

func _Ranking_CreateRanking0_HTTP_Handler(srv RankingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingCreateRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRanking(ctx, req.(*CreateRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateRankingReply)
		return ctx.Result(200, reply)
	}
}

func _Ranking_UpdateRanking0_HTTP_Handler(srv RankingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateRankingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingUpdateRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateRanking(ctx, req.(*UpdateRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateRankingReply)
		return ctx.Result(200, reply)
	}
}

func _Ranking_DeleteRanking0_HTTP_Handler(srv RankingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingDeleteRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRanking(ctx, req.(*DeleteRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteRankingReply)
		return ctx.Result(200, reply)
	}
}

func _Ranking_GetRanking0_HTTP_Handler(srv RankingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingGetRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRanking(ctx, req.(*GetRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRankingReply)
		return ctx.Result(200, reply)
	}
}

func _Ranking_ListRanking0_HTTP_Handler(srv RankingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListRankingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRankingListRanking)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListRanking(ctx, req.(*ListRankingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRankingReply)
		return ctx.Result(200, reply)
	}
}

type RankingHTTPClient interface {
	CreateRanking(ctx context.Context, req *CreateRankingRequest, opts ...http.CallOption) (rsp *CreateRankingReply, err error)
	DeleteRanking(ctx context.Context, req *DeleteRankingRequest, opts ...http.CallOption) (rsp *DeleteRankingReply, err error)
	GetRanking(ctx context.Context, req *GetRankingRequest, opts ...http.CallOption) (rsp *GetRankingReply, err error)
	ListRanking(ctx context.Context, req *ListRankingRequest, opts ...http.CallOption) (rsp *ListRankingReply, err error)
	UpdateRanking(ctx context.Context, req *UpdateRankingRequest, opts ...http.CallOption) (rsp *UpdateRankingReply, err error)
}

type RankingHTTPClientImpl struct {
	cc *http.Client
}

func NewRankingHTTPClient(client *http.Client) RankingHTTPClient {
	return &RankingHTTPClientImpl{client}
}

func (c *RankingHTTPClientImpl) CreateRanking(ctx context.Context, in *CreateRankingRequest, opts ...http.CallOption) (*CreateRankingReply, error) {
	var out CreateRankingReply
	pattern := "/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRankingCreateRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RankingHTTPClientImpl) DeleteRanking(ctx context.Context, in *DeleteRankingRequest, opts ...http.CallOption) (*DeleteRankingReply, error) {
	var out DeleteRankingReply
	pattern := "/delete/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRankingDeleteRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RankingHTTPClientImpl) GetRanking(ctx context.Context, in *GetRankingRequest, opts ...http.CallOption) (*GetRankingReply, error) {
	var out GetRankingReply
	pattern := "/get/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRankingGetRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RankingHTTPClientImpl) ListRanking(ctx context.Context, in *ListRankingRequest, opts ...http.CallOption) (*ListRankingReply, error) {
	var out ListRankingReply
	pattern := "/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationRankingListRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *RankingHTTPClientImpl) UpdateRanking(ctx context.Context, in *UpdateRankingRequest, opts ...http.CallOption) (*UpdateRankingReply, error) {
	var out UpdateRankingReply
	pattern := "/update/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRankingUpdateRanking))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
