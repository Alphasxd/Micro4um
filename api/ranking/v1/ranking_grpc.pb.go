// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: api/ranking/v1/ranking.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Ranking_TopN_FullMethodName          = "/api.ranking.v1.Ranking/TopN"
	Ranking_CreateRanking_FullMethodName = "/api.ranking.v1.Ranking/CreateRanking"
	Ranking_UpdateRanking_FullMethodName = "/api.ranking.v1.Ranking/UpdateRanking"
	Ranking_DeleteRanking_FullMethodName = "/api.ranking.v1.Ranking/DeleteRanking"
	Ranking_GetRanking_FullMethodName    = "/api.ranking.v1.Ranking/GetRanking"
	Ranking_ListRanking_FullMethodName   = "/api.ranking.v1.Ranking/ListRanking"
)

// RankingClient is the client API for Ranking service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Ranking 服务定义
type RankingClient interface {
	// 获取前 N 名排名 (gRPC)
	TopN(ctx context.Context, in *TopNRequest, opts ...grpc.CallOption) (*TopNReply, error)
	// 创建排名 (HTTP POST)
	CreateRanking(ctx context.Context, in *CreateRankingRequest, opts ...grpc.CallOption) (*CreateRankingReply, error)
	// 更新排名 (HTTP POST)
	UpdateRanking(ctx context.Context, in *UpdateRankingRequest, opts ...grpc.CallOption) (*UpdateRankingReply, error)
	// 删除排名 (HTTP DELETE)
	DeleteRanking(ctx context.Context, in *DeleteRankingRequest, opts ...grpc.CallOption) (*DeleteRankingReply, error)
	// 获取单个排名 (HTTP GET)
	GetRanking(ctx context.Context, in *GetRankingRequest, opts ...grpc.CallOption) (*GetRankingReply, error)
	// 列出所有排名 (HTTP GET)
	ListRanking(ctx context.Context, in *ListRankingRequest, opts ...grpc.CallOption) (*ListRankingReply, error)
}

type rankingClient struct {
	cc grpc.ClientConnInterface
}

func NewRankingClient(cc grpc.ClientConnInterface) RankingClient {
	return &rankingClient{cc}
}

func (c *rankingClient) TopN(ctx context.Context, in *TopNRequest, opts ...grpc.CallOption) (*TopNReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopNReply)
	err := c.cc.Invoke(ctx, Ranking_TopN_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingClient) CreateRanking(ctx context.Context, in *CreateRankingRequest, opts ...grpc.CallOption) (*CreateRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRankingReply)
	err := c.cc.Invoke(ctx, Ranking_CreateRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingClient) UpdateRanking(ctx context.Context, in *UpdateRankingRequest, opts ...grpc.CallOption) (*UpdateRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateRankingReply)
	err := c.cc.Invoke(ctx, Ranking_UpdateRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingClient) DeleteRanking(ctx context.Context, in *DeleteRankingRequest, opts ...grpc.CallOption) (*DeleteRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteRankingReply)
	err := c.cc.Invoke(ctx, Ranking_DeleteRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingClient) GetRanking(ctx context.Context, in *GetRankingRequest, opts ...grpc.CallOption) (*GetRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankingReply)
	err := c.cc.Invoke(ctx, Ranking_GetRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rankingClient) ListRanking(ctx context.Context, in *ListRankingRequest, opts ...grpc.CallOption) (*ListRankingReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRankingReply)
	err := c.cc.Invoke(ctx, Ranking_ListRanking_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RankingServer is the server API for Ranking service.
// All implementations must embed UnimplementedRankingServer
// for forward compatibility
//
// Ranking 服务定义
type RankingServer interface {
	// 获取前 N 名排名 (gRPC)
	TopN(context.Context, *TopNRequest) (*TopNReply, error)
	// 创建排名 (HTTP POST)
	CreateRanking(context.Context, *CreateRankingRequest) (*CreateRankingReply, error)
	// 更新排名 (HTTP POST)
	UpdateRanking(context.Context, *UpdateRankingRequest) (*UpdateRankingReply, error)
	// 删除排名 (HTTP DELETE)
	DeleteRanking(context.Context, *DeleteRankingRequest) (*DeleteRankingReply, error)
	// 获取单个排名 (HTTP GET)
	GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error)
	// 列出所有排名 (HTTP GET)
	ListRanking(context.Context, *ListRankingRequest) (*ListRankingReply, error)
	mustEmbedUnimplementedRankingServer()
}

// UnimplementedRankingServer must be embedded to have forward compatible implementations.
type UnimplementedRankingServer struct {
}

func (UnimplementedRankingServer) TopN(context.Context, *TopNRequest) (*TopNReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopN not implemented")
}
func (UnimplementedRankingServer) CreateRanking(context.Context, *CreateRankingRequest) (*CreateRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRanking not implemented")
}
func (UnimplementedRankingServer) UpdateRanking(context.Context, *UpdateRankingRequest) (*UpdateRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRanking not implemented")
}
func (UnimplementedRankingServer) DeleteRanking(context.Context, *DeleteRankingRequest) (*DeleteRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRanking not implemented")
}
func (UnimplementedRankingServer) GetRanking(context.Context, *GetRankingRequest) (*GetRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRanking not implemented")
}
func (UnimplementedRankingServer) ListRanking(context.Context, *ListRankingRequest) (*ListRankingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRanking not implemented")
}
func (UnimplementedRankingServer) mustEmbedUnimplementedRankingServer() {}

// UnsafeRankingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RankingServer will
// result in compilation errors.
type UnsafeRankingServer interface {
	mustEmbedUnimplementedRankingServer()
}

func RegisterRankingServer(s grpc.ServiceRegistrar, srv RankingServer) {
	s.RegisterService(&Ranking_ServiceDesc, srv)
}

func _Ranking_TopN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopNRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServer).TopN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ranking_TopN_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServer).TopN(ctx, req.(*TopNRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranking_CreateRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServer).CreateRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ranking_CreateRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServer).CreateRanking(ctx, req.(*CreateRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranking_UpdateRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServer).UpdateRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ranking_UpdateRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServer).UpdateRanking(ctx, req.(*UpdateRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranking_DeleteRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServer).DeleteRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ranking_DeleteRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServer).DeleteRanking(ctx, req.(*DeleteRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranking_GetRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServer).GetRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ranking_GetRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServer).GetRanking(ctx, req.(*GetRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ranking_ListRanking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRankingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RankingServer).ListRanking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ranking_ListRanking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RankingServer).ListRanking(ctx, req.(*ListRankingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ranking_ServiceDesc is the grpc.ServiceDesc for Ranking service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ranking_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ranking.v1.Ranking",
	HandlerType: (*RankingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopN",
			Handler:    _Ranking_TopN_Handler,
		},
		{
			MethodName: "CreateRanking",
			Handler:    _Ranking_CreateRanking_Handler,
		},
		{
			MethodName: "UpdateRanking",
			Handler:    _Ranking_UpdateRanking_Handler,
		},
		{
			MethodName: "DeleteRanking",
			Handler:    _Ranking_DeleteRanking_Handler,
		},
		{
			MethodName: "GetRanking",
			Handler:    _Ranking_GetRanking_Handler,
		},
		{
			MethodName: "ListRanking",
			Handler:    _Ranking_ListRanking_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ranking/v1/ranking.proto",
}
